[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AI And Local food",
    "section": "",
    "text": "Week 6 Progress Report\n\n\n\n\n\n\n\n\n\nJun 23, 2023\n\n\nSwati Kumari\n\n\n31 min\n\n\n\n\n\n\n  \n\n\n\n\nWeek 5 Progress Report\n\n\n\n\n\n\n\n\n\nJun 15, 2023\n\n\nSwati Kumari\n\n\n5 min\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\n\n\nJun 12, 2023\n\n\nSwati Kumari\n\n\n0 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/5th_week_wrap_up/5th_week_wrap_up.html",
    "href": "posts/5th_week_wrap_up/5th_week_wrap_up.html",
    "title": "Week 5 Progress Report",
    "section": "",
    "text": "This Week’s Tasks\n\nContinued working on web scraping, specifically building spiders for other dynamic websites.\nStarted cleaning part for the data that were web scraped.\nCollected more data from local farms and CSAs websites\nAttended ITAG VI conference at Sheraton West Des moines\nRough sketch of AI in Local Food project\n\n\n\nWeb scraping- spiders\n\nCompleted building spiders for 5 more dynamic websites like Gateway Market, Hyvee, Russ Market, New Pioneer Co op and Fresh Thyme\nlink : Spiders\n\n\n\nWeb Scraped Data cleaning\n\nStarted working on cleaning web scraped data simultaneously.\n\nThis was actually a little bit time consuming as data sets had different columns and we needed to organize the final data set by dropping few unecessary columns.\nWe also realized few data sets has some columns has other did not had as shown below\n\n\n\n\nData collection from local farms and CSAs\n\nAfter collecting data from grocers, went on to collecting more data for local farms and CSAs from Iowa’s CSAs directory.\n  \n\n\n\nStarted building spiders for local farms and CSAs websites as well\n\n\n\nAttended ITAG VI conference\n\n\n\n\n\n\nLearned how modernizing ArcGIS web App Builder apps using experience Builder can be useful.\nHad a long tiring day!\n\n\n\nProject’s roadmap/timeline\n\n\n\n\n\n\n\nA glimpse of AI in Local Food project\n\n\nSummary of the project:\n\nWhat to grow?\nWhere to grow?\nHow much to grow?\nWhere to sell?\nHow to sell (processed/not processed)?\n\nIn this blog, we showed the conceptual tools to tackle four questions but left the last one unanswered.\n\n\nProject flowchart/modules\n\n\n\n\n\n\n\nYield Prediction\nThis is an independent module which means we do not need results from any other module to execute this step.\nThis is a Necessary step to answer “what to grow” and “where to grow”.\n\n\n\n\n\n\n\n\n\n\nGoal: To determine the crop/food item yield per unit area for a specific location in small farms.\nChallenges:\n\nPredicting the yield of each different crop/food item would be different. For example, predicting the yield for heirloom tomatoes would be substantially different from that of corn.\nFurthermore, the factors affecting the yield of heirloom tomatoes would be different from that of eggs/bacon.\nThe lack of data poses a significant challenge for specific crops or food items.\n\n\n\nPotential/temporary solution:\n\nWe can use the data of a closely related crop as a proxy. For example, in the absence of heirloom tomato data, we can rely on the data from closely related varieties like roma tomatoes as a substitute.\nA thorough literature review is necessary to identify potential proxy crops for our target crops.\n\n\n\nCurrent tasks:\n\nFinding out the data, if possible.\nIn the absence of data, we will determine a suitable proxy crop to serve as a substitute for the crop of interest.\n\n\n\nDemand Forecasting\nThis is an independent module which means we do not need results from any other module to execute this step.\nNecessary step to answer “what to grow”, “where to grow”, “how much to grow”, “where to sell”.\n\n\n\n\n\n\n\n\n\n\nGoal: To forecast the demand for a crop/food item at a given location.\nChallenges:\n\nDemand data for certain crops/food items might not be available.\nDetermine the factors that influence the demand.\nFinding out the data of these factors\n\nPotential and temporary solution:\n\nIf data regarding the key factors and/or the historical demand data of crop/food items are not available, we can build an economic model based on the following concepts:\n\nthe relation between a product’s supply, demand with price (in this case, crop/food item) as described in economics!\nfactors affecting the demand and supply of the product.\nfactors affecting demand and supply of the complimentary products.\nfactors affecting the demand and supply of substitute products.\n\n\nCurrent tasks:\n\nFinding out the historical pricing data at different locations.\nFinding out the demand data at different locations.\nIn situations where data is unavailable, we can opt to develop an economic model instead of relying on a data-driven approach.\n\n\n\nCrop Allocation\nThis module depends on the solution of the previous two module. That means in order to start this module we need the results from “Yield Prediction” and “Demand Forecasting” modules.\nThis module answers the questions “where to grow, what to grow, how much to grow”\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGoal: To determine the most favorable combination of crop types, planting locations, and quantities for individual farmers.\nThe objective is to enable farmers to make informed decisions regarding their crop selection, where to plant them, and how much to produce, ultimately maximizing the overall profitability across all farmers involved.\nChallenges: A common error is advising all farmers to focus on cultivating a single crop that has the potential for high revenue. Such situations can lead to a significant increase in the supply of that specific product, causing a shortage of supply for other crop/food items.\nCurrent task: A toy model demonstrating the concept.\nFeedback received:\n\nWe should consider farmers’ willingness to accept our recommendation.\nWe should not enforce hard boundaries for planting crops, such as restricting a county to grow only corn and excluding other crops. Instead, we should adopt a flexible approach that allows for the cultivation of various crops in every county.\n\n\n\nSupply Chain Optimization\nThis module depends on the solution of the previous module. That means in order to start this module we need the results from “Crop allocation” module.\nAnswers the question “where to sell”.\n\n\n\n\n\nGoal: To determine where and at what quantity a farmer should sell crops/food items, maximizing the overall profit among all the farmers.\nChallenges:\nThe yield of the crops would be distributed in the final phase of the crop cultivation months.\nDepending on the freshness and amount of the crops to sell, the decision support system (our software) should recommend the store for selling the products.\nCurrent task: A toy model demonstrating the concept.\nFeedback received:\n\nA map of the demands and the supplies of the crops itself provides hints about where to grow and sell products."
  },
  {
    "objectID": "posts/6th_week_wrap_up/6th_week_Wrapup.html",
    "href": "posts/6th_week_wrap_up/6th_week_Wrapup.html",
    "title": "Week 6 Progress Report",
    "section": "",
    "text": "Monday and Tuesday (WINVEST Day)\n\nOn Monday of week six, DSPG conducted assessments of houses in Grundy Center and New Hampton by taking pictures and tracking their characteristics using the Fulcrum app. We then continued our evaluations in Independence on Tuesday, which marked the conclusion of our WINVEST site assessments.\nDuring the assessments, we meticulously examined the houses’ structural features and recorded detailed notes on the condition of the driveway, foundation, gutters, paint, porch, roof, siding, walls, and window frames, as well as any other noteworthy features that were in poor condition.\nWe also took into account the condition of the lot, noting any junk or debris present on the site. Additionally, we evaluated the sidewalk connecting to the house and made note of its condition.\nWe paid extra close attention to the gutters, roof, siding, and landscape, assessing whether they were in good, fair, or poor condition. As we took and evaluated the pictures, we meticulously noted any obstructions in the photo(s) taken, paying close attention to whether they were caused by overgrown vegetation (such as bushes or weeds), trees, electrical posts, cars, or any other obstructions.\nAlong with evaluation of the housing, we also took note of our general impressions of the block. We evaluated the neighborhood sidewalks, taking note of whether they were partial or only on one side, and if they had curb cuts for easy accessibility at intersections.\nAdditionally, we assessed the condition of the sidewalks, ranking them to determine if they were unsafe and in need of repair or replacement. We also assessed the condition of the street trees and evaluated their overall health, marking any that appeared to be in poor condition.\nWe took note of the presence and condition of street lights, paying special attention to the brightness and coverage of the lights. We also marked the location of any street signs for wayfinding. Additionally, we identified the type of storm drain, whether it was a ditch/swale, curb/gutter, or another type of system. Finally to document our observations, we took pictures of both sides of the street block, capturing any notable features or areas of concern.\nAdditionally, if we identified any flaws or damages in the sidewalk, we took pictures to document the issues.\n\nHere are the comprehensive maps of our WINVEST site assessments, as well as a photo of a typical house that we would assess.\n\n\n\n\n\n\n\n\nMap 1\n\n\n\n\n\n\n\nMap 2\n\n\n\n\n\n\n\n\n\nMap 3\n\n\n\n\n\n\n\nAn example of collected data\n\n\n\n\n\nOther AddOns to the day\nMe, Sadat and Harun discussed about the current progress of the project and came up with few other ideas.\nA little bit about project discussion that we had:\nInventory\n\nThere is some cleaned data after web-scraping.\nThere are also uncleaned datasets in Box/GitHub\nEach category has;\n\nPrice, Weight, URL, Local/Not-Local, and Zip Code\n\n\nOriginal Idea\n\nPlot commodities by location to investigate price differences.\nAnswer whether the locality of a commodity affects its prices.\n\nBRAINSTORMING SESSION ------------------------------------------------------------------\nSome New Ideas\n\nSupply Chain Operations  / Commodity arbitrage.\nData collection is the major problem.\n\nBuilding a multi-purpose spider that can pull information for local food data collection part.\n\n\nFinal thoughts that we all came up with:\n\nCreating a reliable tool that works for scraping data (potentially a well-documented spider template).\nInvestigate a single product as a case study to scrape data for simple spatial visualization by zip code.\nCreate some application for demonstrating how a Supply Chain Operations tool could be utilized.\n\n\n\nWednesday ( Client Meeting Day)\nHad a Meeting with Courtney Long where we discussed further preceding of the project\n\n\n\n\n\nFinal thoughts after client meeting that we all agreed on: \n\nA comprehensive map to showcase the prices of eggs and bacon across various counties using the collected data. This map serves as a valuable tool for identifying trends and patterns in pricing, as well as understanding customer preferences towards specific brands. Additionally, the map aids in the selection of suitable selling locations by considering crucial factors such as brand reputation, pricing, and travel distance (cost). \nA number of web-scrapping spiders for selected websites to facilitate the creation of a comprehensive product database. These spiders will automate the process of data scraping, enabling repetitive and efficient collection of data.  \nShowcase the capability of the spiders with a specific crop example. The spiders will be utilized to extract data for one of the following six products: tomatoes (regardless of the type), carrots, lettuce, watermelon, eggplant, or leafy greens. This demonstration will effectively highlight the functionality and effectiveness of the spiders in retrieving the desired data. \nOptimization of the crop flow, from the point of supply to the point of demand, that maximizes overall profit. We will explore the factors and methodology to estimate the demand and supply. \n\nOptimization of the crop flow, from the point of supply to the point of demand: \n\n\n\n\n\n\nThe red points represent the counties. \nThe green lines represent the flow of crops, and the blue arrow shows the direction of the flow. \n\nCurrent issues that will be resolved:\nThe supply is greater than the demand.\nMinimizing the traveling distance rather than maximizing the profit.\nConsidered random points as counties instead of the original location of each county.\nThe following might be included in the project:\n\n\n\nA separate account of fresh and not fresh products.\nConsideration of each individual farmer’s profit.\n\nAt the end of the day, we all discussed and listed down all the project’s output that we plan to produce at the end of this project.\n\n\n\n\n\n\n\nThursday\nWe started our day with coffee talk which was done and presented by Aaron. Aaron spoke about web scraping, specifically spiders in web scraping.\n\n\n\n\n\n\n\n\n\n\nThe above and below pictures shows a glimpse of what was presented in coffee talk.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWork In Progress… \n\nWe are almost to the end of cleaning all the spiders. Data that we collected from grocers list is almost cleaned and now we are moving ahead with the data that we collected from local farms and CSAs. A snapshot of how we are cleaning and adding “local” column to the final data set can be seen below:\n\n“Hyvee” spider is still being worked on and the code is on the run. A small part of the code can be seen below:\n\nfrom DSPG_Products import Products #Imports the products\nfrom DSPG_SpiderErrors import DataCleanerError\nfrom DSPG_SpiderErrors import BrandingError\nfrom DSPG_SpiderErrors import StringValueExtractionError\nfrom DSPG_SpiderErrors import DebugError\nfrom datetime import datetime\n\n#This is a helper class to reduce duplicate code in the DataCleaner class\nclass DataCleaner():\n\n    def __init__(self):\n        self.getLocalBrands = [\n            #Bacon\n            {'desmoinesbaconandmeatcompany', 'desmoinesbaconco','berkwoodfarms', 'joiagoodfarm', 'beeler', 'dmbaconco', 'prairiefresh', 'webstercity', 'hyvee', 'hickorycountry'},\n            #Eggs\n            {'farmershenhouse', 'cedarridgefarm', 'joiafoodfarm', 'thatssmart', 'hyvee', 'beavercreekfarm'},\n            #Heirloom Tomatoes\n            {'seedsavers'}\n        ]\n\n        self.getNonLocalBrands = [\n            #Bacon\n            {'jollyposh', 'farmland', 'countrysmokehouse', 'herbivorousbutcher', 'bigbuy', 'nimanranch', 'jimmydean', 'farmpromise', 'hormel', 'plainvillefarms', 'nueske', 'smithfield', 'applegate', 'garrettvalley', 'pedersonsnaturalfarms', 'indianakitchen', 'freshthyme', 'oscarmayer', 'jamestown', 'debruinranch', 'wright', 'boarshead'},\n            #Eggs\n            {'stateline', 'freshthyme', 'bornfree', 'handsomebrookfarm', 'handsomebrookfarms', 'egglandsbest', 'peteandgerryseggs', 'pennysmart', 'bestchoice', 'nellies', 'vitalfarms', 'organicvalley', 'happyegg'},\n            #Heirloom Tomatoes\n            {'organicvalley', 'delcabo'}\n        ]\n\n        self.getBrandNames = [\n            #Bacon\n            {'Des moines bacon & meat company','Jimmy dean', 'Oscar mayer', 'Jolly posh','Webster city', 'Prairie fresh', 'Des-moines-bacon-and-meat-company', \"Boar's head\", 'Fresh thyme', 'Country-smokehouse', 'Farm promise', 'Hormel', 'Oscar-mayer', 'Smithfield', 'Farmland', 'De bruin ranch', 'Indiana kitchen', \"Pederson's natural farms\", 'Des moines bacon co', 'Applegate', 'Country smokehouse', 'Niman ranch', 'Jolly posh', 'Berkwood farms', 'Hyvee', 'Jimmy-dean', 'Dm bacon co', 'Herbivorous butcher', 'Hickory country', 'Hy-vee', 'Beeler', 'Joia food farm', 'Garrett valley', 'Deli', 'Jamestown', 'Plainville farms', 'Big buy', 'Nueske', 'Wright'},            \n            #Eggs\n            {\"That's smart\", \"Egglands best\", \"Pete and gerry's eggs\" ,\"Nellie's\", \"Eggland's best\", 'Handsome brook farm', 'Egglands-best', 'Farmers hen house', 'Handsome brook farms', 'Joia food farm', 'Penny smart', 'Fresh thyme', 'Vital farms', 'Best choice', 'Nellies-eggs', 'Organic valley', 'Cedar ridge farm', 'Happy egg', 'Thats-smart', 'Pete-and-gerrys-eggs', 'Farmers-hen-house', 'Beaver creek farm', 'Born free', 'Stateline', 'Hyvee', 'Hy-vee'},\n            #Heirloom Tomatoes\n            {'Del cabo', 'Seed savers', 'Organic valley'}\n        ]\n\n    def LoadDataSet(self, inputIndex, url):\n        self.productIndex = inputIndex\n        if inputIndex == 0:\n            self.Data = {'Product Type': None,\n                         'Current Price': None,\n                         'Orignal Price': None,\n                         'Weight in lbs': None,\n                         'True Weight': None,\n                         'Brand': None,\n                         'Local': None,\n                         'Address': None,\n                         'State': None, \n                         'City': None, \n                         'Zip Code': None, \n                         'Date Collected': str(datetime(datetime.today().year, datetime.today().month, datetime.today().day))[:-9], \n                         'Url': url\n                        }\n        elif inputIndex == 1:\n            self.Data = {'Product Type': None,\n                         'Current Price': None,\n                         'Orignal Price': None,\n                         'Amount in dz': None,\n                         'True Amount': None,\n                         'Brand': None,\n                         'Local': None,\n                         'Address': None,\n                         'State': None, \n                         'City': None, \n                         'Zip Code': None, \n                         'Date Collected': str(datetime(datetime.today().year, datetime.today().month, datetime.today().day))[:-9], \n                         'Url': url\n                        }\n        elif inputIndex == 2:\n            self.Data = {'Product Type': None,\n                         'Current Price': None,\n                         'Orignal Price': None,\n                         'Weight in lbs': None,\n                         'True Weight': None,\n                         'Brand': None,\n                         'Organic': None,\n                         'Local': None,\n                         'Address': None,\n                         'State': None, \n                         'City': None, \n                         'Zip Code': None, \n                         'Date Collected': str(datetime(datetime.today().year, datetime.today().month, datetime.today().day))[:-9], \n                         'Url': url\n                        }\n        else:\n            raise DataCleanerError(inputIndex)\n\n\n    def cleanPricing(self):\n        price = ''.join(c for c in self.Data['Current Price'] if c.isdigit() or c == '.')\n        if len(price) == 0:\n            return\n        self.Data['Current Price'] = float(price)\n        if self.Data['Orignal Price'] == None:\n            self.Data['Orignal Price'] = self.Data['Current Price']\n            return\n        price = ''.join(c for c in self.Data['Orignal Price'] if c.isdigit() or c == '.')\n        if len(price) == 0:\n            self.Data['Orignal Price'] = self.Data['Current Price']\n        else:\n            self.Data['Orignal Price'] = float(price)\n    \n    def baconModifications(self):\n        #Finds True Weight if not available \n        if(self.Data['True Weight'] == None):\n            self.Data['True Weight'] = self.findWeight()\n        #Sets the Weight in lbs if possible\n        if(self.Data['True Weight'] != None):\n            self.Data['Weight in lbs'] = self.ozToLb(self.Data['True Weight'])\n\n    def ozToLb(self, input):\n        if input == None:\n            return None\n        weight = str(input).lower()\n        if 'oz' in weight:\n            return self.stringValueExtraction(weight, 'oz') / 16.0\n        elif 'lbs' in weight:\n            return self.stringValueExtraction(weight, 'lb')\n        elif '/lb' in weight:\n            return 1.0\n        elif 'lb' in weight:\n            return self.stringValueExtraction(weight, 'lb')\n        return None\n\n    #If no weight is given we look at other places that could have what we need\n    #This Determines if a list talking about weights in ounces or pounds.\n    def findWeight(self):\n        #Checking these places for clues\n        checkLocations = [self.Data['Current Price'], self.Data['Product Type'], self.Data['Orignal Price']]\n        possible = []\n        for string in checkLocations:\n            if string == None:\n                continue\n            string = string.lower().replace(' ', '') # convert to lowercase and remove spaces\n            if 'pound' in string:\n                return  f\"{self.stringValueExtraction(string, 'pound')} lb\"\n            elif 'ounce' in string:\n                return f\"{self.stringValueExtraction(string, 'ounce')} oz\"\n            elif 'lbs' in string:\n                return f\"{self.stringValueExtraction(string, 'lbs')} lb\"\n            elif '/lb' in string:\n                return f\"{self.stringValueExtraction(string, '/lb')}/lb\"\n            elif 'lb' in string:\n                return f\"{self.stringValueExtraction(string, 'lb')} lb\"\n            elif 'oz' in string:\n                return f\"{self.stringValueExtraction(string, 'oz')} oz\"\n            elif '/ea' in string:\n                #This is the worst outcome so we want to append it to a list for later\n                possible.append(f\"{self.stringValueExtraction(string, '/ea')}/ea\")\n            \n        return next((item for item in possible if item is not None), None)\n        \n    #Heirloom tomatoes are tricky \n    def heirloomTomatoesModifications(self, weight):\n        #We can extract Organic from the name\n        if self.Data['Organic'] == None:\n            if 'organic' in self.Data['Product Type'].lower().replace(' ', ''): # convert to lowercase and remove spaces\n                self.Data['Organic'] = 'Organic'\n        #This part is for Weight\n        if self.Data['True Weight'] != None:\n            self.Data['Weight in lbs'] = self.ozToLb(self.Data['True Weight'])\n            return\n        if weight == None:\n            string = self.findWeight()\n            if '/lb' in string.lower().replace(' ', ''):\n                self.Data['True Weight'] = string\n                self.Data['Weight in lbs'] = 1.0\n                return\n            else:\n                self.Data['True Weight'] = string\n        else:\n            self.Data['True Weight'] = weight\n        self.Data['Weight in lbs'] = self.ozToLb(self.Data['True Weight'])\n        \n    #Helper to reduce code. Splits the string and returns the float value \n    def stringValueExtraction(self, string, stringType):\n        if string == None or stringType == None:\n            raise StringValueExtractionError (string, stringType)\n        value = ''\n        stringList = []\n        for string in string.split(stringType):\n            for c in string:\n                if c.isdigit() or c == '.':\n                    value += c\n                elif value:\n                    stringList.append(float(value))\n                    value = ''\n        if value:\n            stringList.append(float(value))\n        return stringList[-1] if stringList else None\n\n    #Eggs don't have weight so we use amount\n    def eggModifications(self):\n        if self.Data['True Amount'] == None:\n            checkLocations = [self.Data['Product Type'], self.Data['Current Price'], self.Data['Orignal Price']]\n            for string in checkLocations:\n                if string == None:\n                    continue\n                string = string.lower().replace(' ', '') # convert to lowercase and remove spaces\n                if 'dozen' in string:\n                    amount = self.stringValueExtraction(string, 'dozen')\n                    if amount == None:\n                        self.Data['True Amount'] = f\"{1} dz\"\n                        self.Data['Amount in dz'] = 1.0\n                        return\n                    self.Data['True Amount'] = f\"{amount} dz\"  \n                    self.Data['Amount in dz'] = amount\n                    return  \n                if 'dz' in string:\n                    amount = self.stringValueExtraction(string, 'dz')\n                    self.Data['True Amount'] = f\"{amount} dz\"\n                    self.Data['Amount in dz'] = amount\n                    return \n                if 'ct' in string:\n                    amount = self.stringValueExtraction(string, 'ct')\n                    self.Data['True Amount'] = f\"{amount} ct\"  \n                    self.Data['Amount in dz'] = amount / 12\n                    return\n                if 'ea' in string:\n                    amount = self.stringValueExtraction(string, 'ea')\n                    self.Data['True Amount'] = f\"{amount} ea\"  \n                    self.Data['Amount in dz'] = amount / 12\n                    return\n                if 'pk' in string:\n                    amount = self.stringValueExtraction(string, 'pk')\n                    self.Data['True Amount'] = f\"{amount} pk\"  \n                    self.Data['Amount in dz'] = amount / 12\n                    return\n                \n        else:\n            string = self.Data['True Amount'].lower().replace(' ', '')\n            if 'dozen' in string:\n                amount = self.stringValueExtraction(string, 'dozen')\n                if amount == None:\n                    self.Data['Amount in dz'] = 1.0\n                    return\n                self.Data['Amount in dz'] = amount\n            elif 'dz' in string:\n                self.Data['Amount in dz'] = self.stringValueExtraction(string, 'dz')\n            elif 'ct' in string:\n                self.Data['Amount in dz'] = self.stringValueExtraction(string, 'ct') / 12\n            elif 'ea' in string:\n                self.Data['Amount in dz'] = self.stringValueExtraction(string, 'ea') / 12\n            elif 'pk' in string:\n                self.Data['Amount in dz'] = self.stringValueExtraction(string, 'pk') / 12\n            elif 'pack' in string:\n                self.Data['Amount in dz'] = self.stringValueExtraction(string, 'pack') / 12\n\n    def determineLocality(self):\n        try:\n            if self.Data['Brand'] == None:\n                #Formats the name\n                name = ' '.join(self.Data['Product Type'].split()).lower() # remove extra spaces\n                name = ''.join(c for c in name if c.isalpha() or c == \"'\" or c == \" \" or c == \"-\" or c == \"&\") # keep only letters, apostrophes, hyphens, and spaces and capitalize the first letter\n                name = name.capitalize()\n                brand = ''\n                for b in self.getBrandNames[self.productIndex]:\n                    if b in name and len(b) > len(brand):\n                        brand = b\n                self.Data['Brand'] = brand\n            else:\n                self.Data['Brand'] = self.Data['Brand'].lower().capitalize()\n            #Converts the brand into something we can quickly compair\n            brand = ''.join(c for c in self.Data['Brand'] if c.isalpha()).lower()\n            #Determins locality\n            if brand in {'deli'}:\n                self.Data['Local'] = \"Can't be Determined\"\n            elif brand in self.getLocalBrands[self.productIndex]:\n                self.Data['Local'] = \"Local\"\n            elif brand in self.getNonLocalBrands[self.productIndex]:\n                self.Data['Local'] = \"Non-local\"\n            else:\n                self.Data['Local'] = \"None Listed\"\n\n            if self.productIndex == 2: #Special condition for Heirloom Tomatoes\n                #Sometimes what we need is in the name\n                name = self.Data['Product Type'].lower().replace(' ', '')\n                if 'organic' in name:\n                    self.Data['Organic'] = True  \n                if 'local' in name: # convert to lowercase and remove spaces\n                    self.Data['Local'] = 'Local'\n        except IndexError:\n            raise BrandingError(self.productIndex)\n\n#Two Helper functions in case we need to add more brands to the loadBrands function above\n#for the getBrandNames\n# def CleanStringList(strings):\n#     cleaned = set()\n#     for s in strings:\n#         s = ''.join(c for c in s if c.isalpha()).lower() # keep only letters\n#         cleaned.add(s)\n#     print(list(cleaned))\n\n# #for the getLocalBrands and getNonLocalBrands\n# def CleanStringNames(strings):\n#     cleaned = set()\n#     for s in strings:\n#         name = ' '.join(s.split()).lower() # remove extra spaces\n#         name = ''.join(c for c in name if c.isalpha() or c == \"'\" or c == \" \" or c == \"-\").capitalize() # keep only letters, apostrophes, hyphens, and spaces and capitalize the first letter\n#         cleaned.add(name)\n#     print(list(cleaned)\n)\n3.Hunt for more data on many other resources/websites provided by our client is going on.\nThese resources/websites come from a list that are currently purchasing or selling local food products for a Local Food Purchasing Assistance and Local Food to Schools Program.\n-Prudent Produce\n-Wheatsfield\n-Field to Family\n-Farm Table Delivery\n-Organic Greens\n-Iowa Food Cooperative\n-Grinnell Farm to table\n-All Seasons Harvest\n-Farmers Hen House\n-Early Morning Harvest\n-Flint Ridge Cooperative\n-Oneota Cooperative\n\nCrop flow optimization model is still being worked on\n\n\n\n\nPlan for the next week\nWe have next client meeting on 28th June 23, so we plan to complete the entire data cleaning process before that so that we can start with Data Analysis and modeling process.\n\nPlanning on creating a teaser video for our project.\nWe will start working on data Analysis and modelling which includes cleaning, exploring partitioning, modelling and projecting output from the final data set.\nSimultaneously, we plan look for more data that can be used for project."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  }
]